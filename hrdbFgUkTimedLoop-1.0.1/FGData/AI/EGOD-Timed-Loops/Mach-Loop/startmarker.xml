<?xml version="1.0"?>
<PropertyList>

  <path>largemarker.ac</path>
 
  <nasal>
    <load><![CDATA[
srand(); #set seed for random generator
screen.log.write("Mach Loop start loaded");

var root = cmdarg();
var rootindex = root.getIndex();
var markerPath = "/ai/models/aircraft["~ rootindex ~"]/";

var greenFlash = func {
	settimer(func{interpolate("/mach-loop-timer/color-red", 1, 0.6);}, 0.2);
	interpolate("/mach-loop-timer/color-red", 0.35, 0.2);
}

var markerCoord = geo.Coord.new();
markerCoord.set_latlon(
	getprop(markerPath~"position/latitude-deg"), 
	getprop(markerPath~"position/longitude-deg"), 
	getprop(markerPath~"position/altitude-ft")
);

var planeCoord = geo.Coord.new();
props.globals.initNode("/mach-loop-timer/starttime", 0, "DOUBLE");
props.globals.initNode("/mach-loop-timer/finished-notcleared", 0, "BOOL");
props.globals.initNode("/mach-loop-timer/start-delay", 1, "BOOL");

var machCheck = maketimer(0.2, 
func {
	if(machCheck == nil) {
		return;
	}
	if(getprop("/velocities/mach")>1.0 and getprop("/mach-loop-timer/starttime")>0) {
		setprop("/sim/multiplay/chat", "BOOM! "~getprop("/sim/multiplay/callsign")~" ("~getprop("/sim/aircraft")~") went supersonic! Stopping timed run...");
		setprop("/mach-loop-timer/starttime", 0);
		interpolate("/mach-loop-timer/color-green", 0.35, 2);
	}
	if(getprop("/sim/speed-up")!=1.0 and getprop("/mach-loop-timer/starttime")>0) {
		setprop("/sim/multiplay/chat", getprop("/sim/multiplay/callsign")~" ("~getprop("/sim/aircraft")~") is cheating (changing sim speed). Shame on you!");
		setprop("/mach-loop-timer/starttime", 0);
		interpolate("/mach-loop-timer/color-green", 0.35, 2);
	}
});
machCheck.singleShot = 0;

var clearWaypoints = func {
	var wayptsNode = props.globals.getNode("/mach-loop-timer");
	forindex(var i; wayptsNode.getChildren("waypoint")) {
		props.globals.initNode("/mach-loop-timer/waypoint["~i~"]/passed", 0, "BOOL");
		setprop("/mach-loop-timer/waypoint["~i~"]/passed", 0);
		#print("Clearing waypoint "~i);
	}
}

var distLoop = maketimer(0.1, 
func {
	if(distLoop == nil) {
		return;
	}
	if(getprop("/mach-loop-timer/starttime")==0) machCheck.stop();
	
	if(getprop("/mach-loop-timer/start-delay")) {
		planeCoord.set_latlon(
			getprop("/position/latitude-deg"), 
			getprop("/position/longitude-deg"), 
			getprop("/position/altitude-ft")
		);
		var dist = markerCoord.direct_distance_to(planeCoord);
		var ubody = getprop("/velocities/uBody-fps");
		var vbody = getprop("/velocities/vBody-fps");
		var wbody = getprop("/velocities/wBody-fps");
		var velocity = 0.3048*math.sqrt(ubody*ubody + vbody*vbody + wbody*wbody);
		
		
		
		var time1 = dist/velocity/8;
		var looptime = time1;
		if(time1<0.1) {
			looptime = 0.0001;
		}
		if(time1>20) {
			looptime = 19+2*rand();
		}
		#print("time1="~time1~" looptime="~looptime);
		
		
		#screen.log.write("Distance to start: "~dist~"  velocity: "~velocity);
		#screen.log.write("loop time: "~looptime);
		#print("Distance to start: "~dist~"  velocity: "~velocity);
		#print("loop time: "~looptime);
		#print("sim time: "~getprop("/sim/time/elapsed-sec"));
		
		if(dist<100) {
			setprop("/mach-loop-timer/starttime", getprop("/sim/time/elapsed-sec"));
			setprop("/sim/multiplay/chat", getprop("/sim/multiplay/callsign")~" ("~getprop("/sim/aircraft")~") started timed Mach Loop!");
			machCheck.start();
			clearWaypoints();
			setprop("/mach-loop-timer/finished-notcleared", 0);
			setprop("/mach-loop-timer/start-delay", 0);
			settimer(func{setprop("/mach-loop-timer/start-delay", 1);}, 5);
			interpolate("/mach-loop-timer/color-green", 1, 0.2);
			greenFlash();
		}
	
		distLoop.restart(looptime);
	}
	else {
		distLoop.restart(6);
	}
});
distLoop.singleShot = 1;
var listenStarttime = setlistener("/mach-loop-timer/starttime", 
	func{distLoop.restart(0.2);});
var listenNotcleared = setlistener("/mach-loop-timer/finished-notcleared", 
	func{distLoop.restart(0.2);});
distLoop.start();
]]>
    </load>
    <unload>
screen.log.write("Mach Loop start unloaded");
removelistener(listenStarttime);
removelistener(listenNotcleared);
distLoop.stop();
distLoop = nil;
machCheck.stop();
machCheck = nil;
    </unload>
  </nasal>
  

  <animation>
    <type>noshadow</type>
    <object-name>marker1</object-name>
  </animation>

  <animation>
        <type>alpha-test</type>
        <alpha-factor>0.01</alpha-factor>
    </animation>
	
  <effect>
   <inherits-from>Effects/model-transparent</inherits-from>
   <condition>
    <property>/sim/rendering/rembrandt/enabled</property>
   </condition>
   <object-name>marker1</object-name> 
  </effect>

  <animation>
    <type>material</type>
    <object-name>marker1</object-name>
    <emission>
      <red>   0 </red>
      <green> 1 </green>
      <blue>  0 </blue>
    </emission>
  </animation>

 

  
 
</PropertyList>
